import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
});

async function setupDatabase() {
  try {
    console.log('üîÑ Starte Datenbank-Setup f√ºr Trading Journal...');

    // Tabelle: sessions
    await pool.query(`
      CREATE TABLE IF NOT EXISTS sessions (
        sid VARCHAR NOT NULL PRIMARY KEY,
        sess JSON NOT NULL,
        expire TIMESTAMP(6) NOT NULL
      );
    `);
    await pool.query(`
      CREATE INDEX IF NOT EXISTS IDX_sessions_expire ON sessions (expire);
    `);
    console.log('‚úÖ Sessions-Tabelle und Index erstellt');

    // Tabelle: users
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    console.log('‚úÖ Benutzer-Tabelle erstellt');

    // Tabelle: trades
    await pool.query(`
      CREATE TABLE IF NOT EXISTS trades (
        id SERIAL PRIMARY KEY,
        symbol TEXT,
        date TIMESTAMP WITH TIME ZONE,
        setup TEXT,
        main_trend_m15 TEXT,
        internal_trend_m5 TEXT,
        entry_type TEXT,
        entry_level TEXT,
        position_size NUMERIC,
        take_profit NUMERIC,
        stop_loss NUMERIC,
        exit_level NUMERIC,
        potential_rrr NUMERIC,
        actual_rrr NUMERIC,
        trade_duration TEXT,
        trade_result TEXT,
        notes TEXT,
        chart_image_url TEXT,
        liquidity_level TEXT,
        deviation TEXT,
        session_nyc BOOLEAN,
        session_london BOOLEAN,
        session_asia BOOLEAN,
        session_time TEXT,
        trend_alignment TEXT,
        smart_money_concept TEXT,
        market_structure TEXT,
        advanced_pattern TEXT,
        chart_pattern TEXT,
        fundamental_news TEXT,
        wick_fill TEXT,
        spread_size TEXT,
        psychological_level BOOLEAN,
        trade_management TEXT,
        exit_reason TEXT,
        advanced_exit TEXT,
        liquidation_level TEXT,
        liquidation_entry TEXT,
        user_id INTEGER REFERENCES users(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    console.log('‚úÖ Trades-Tabelle erstellt');

    // Tabelle: settings
    await pool.query(`
      CREATE TABLE IF NOT EXISTS settings (
        id SERIAL PRIMARY KEY,
        key TEXT NOT NULL,
        value JSONB,
        user_id INTEGER REFERENCES users(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    console.log('‚úÖ Settings-Tabelle erstellt');

    // Tabelle: weekly_summary
    await pool.query(`
      CREATE TABLE IF NOT EXISTS weekly_summary (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        week_start TIMESTAMP WITH TIME ZONE,
        week_end TIMESTAMP WITH TIME ZONE,
        total_rr NUMERIC,
        trade_count INTEGER,
        win_rate NUMERIC,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    console.log('‚úÖ Weekly-Summary-Tabelle erstellt');

    // Standardbenutzer einf√ºgen
    const result = await pool.query('SELECT COUNT(*) FROM users');
    if (parseInt(result.rows[0].count) === 0) {
      await pool.query(`
        INSERT INTO users (username, password)
        VALUES ('admin', 'admin123'), ('mo', 'mo123');
      `);
      console.log('‚úÖ Standard-Benutzer wurden erfolgreich erstellt');
    } else {
      console.log('‚ÑπÔ∏è Benutzer existieren bereits ‚Äì kein Einf√ºgen notwendig');
    }

    console.log('üèÅ Datenbank-Setup abgeschlossen');
  } catch (error) {
    console.error('‚ùå Fehler beim Einrichten der Datenbank:', error);
    process.exit(1);
  } finally {
    await pool.end();
    console.log('üîå Datenbankverbindung geschlossen');
  }
}

setupDatabase();
